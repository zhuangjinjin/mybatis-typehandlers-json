/*
 * Copyright 2019 ukuz90
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

javadoc {
    options {
        encoding 'UTF-8'
        charSet 'UTF-8'
        author true
        version true
        title 'javadoc'
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def pomConfig = {
    scm {
        connection "scm:git:git@github.com:zhuangjinjin/${rootProject.name}.git"
        developerConnection "scm:git:ssh@github.com:zhuangjinjin/${rootProject.name}.git"
        url "${projectScmUrl}"
    }
    issueManagement {
        system "Github Issue Tracker"
        url "${projectScmUrl}/issues"
    }
    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }

    developers {
        developer {
            name 'ukuz90'
            email '171282086@qq.com'
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                def root = asNode()
                root.dependencies.dependency.findAll {xmlDep ->
                    if (project.configurations.optional.allDependencies.findAll {dep ->
                        xmlDep.groupId.text() == dep.group && xmlDep.artifactId.text() == dep.name
                    }) {
                        def xmlOptional = xmlDep.optional[0];
                        if (!xmlOptional) {
                            xmlOptional = xmlDep.appendNode('optional')
                        }
                        xmlOptional.value = 'true'
                    }

                    if (project.configurations.implementation.allDependencies.findAll {dep ->
                        xmlDep.groupId.text() == dep.group && xmlDep.artifactId.text() == dep.name
                    }) {
                        def xmlScope = xmlDep.scope[0];
                        if (!xmlScope) {
                            xmlScope = xmlDep.appendNode('scope')
                        }
                        xmlScope.value = 'runtime'
                    }

                    if (project.configurations.compile.allDependencies.findAll {dep ->
                        xmlDep.groupId.text() == dep.group && xmlDep.artifactId.text() == dep.name
                    }) {
                        def xmlScope = xmlDep.scope[0];
                        if (!xmlScope) {
                            xmlScope = xmlDep.appendNode('scope')
                        }
                        xmlScope.value = 'compile'
                    }
                }
                root.appendNode('url', "${projectScmUrl}")
                root.appendNode('name', "${project.name}")
                if (project.name == rootProject.name) {
                    root.appendNode('packaging', 'pom')
                } else {
                    root.appendNode('packaging', 'jar')
                }
                root.children().last() + pomConfig
            }
            repositories {
                maven {
                    name 'remoteArtifactory'
                    url "${uploadUrl}"
                    credentials {
                        username = project.hasProperty("nexusUsername") ? nexusUsername : System.getenv("nexusUsername")
                        password = project.hasProperty("nexusPassword") ? nexusPassword : System.getenv("nexusPassword")
                    }
                }
            }

        }

    }

}


